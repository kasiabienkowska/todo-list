{"version":3,"sources":["components/TodoForm.jsx","components/Todo.jsx","components/ListToDo.jsx","App.js","index.js"],"names":["DivInputAdd","styled","div","InputAdd","input","ButtonAdd","button","DivInputEdit","InputEdit","ButtonEdit","TodoForm","props","useState","edit","value","setInput","inputFocus","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","placeholder","onChange","name","ref","onClick","ListDiv","TextDiv","Icons","InputCompleted","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","style","textDecoration","isComplete","size","color","type","checked","Container","ContentDiv","ListToDo","setTodos","test","alert","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2d965f9.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nconst DivInputAdd = styled.div`\n\twidth: 100%;\n`;\n\nconst InputAdd = styled.input`\n\tpadding: 0.5em;\n\tmargin: 0.5em;\n\tcolor: black;\n\tbackground: papayawhip;\n\tborder: none;\n\tborder-radius: 3px;\n\twidth: 400px;\n\theight: 30px;\n`;\n\nconst ButtonAdd = styled.button`\n\tbackground-color: white;\n\tborder: none;\n\tcolor: black;\n\tpadding: 12px 30px;\n\ttext-align: center;\n\ttext-decoration: none;\n\tdisplay: inline-block;\n\tfont-size: 16px;\n\tmargin-left: 15px;\n\t:hover {\n\t\tbackground-color: black;\n\t\tcolor: white;\n\t}\n`;\n\nconst DivInputEdit = styled.div`\n\twidth: 100%;\n`;\n\nconst InputEdit = styled.input`\n\tpadding: 0.5em;\n\tmargin: 0.5em;\n\tcolor: black;\n\tbackground: pink;\n\tborder: none;\n\tborder-radius: 3px;\n\twidth: 200px;\n\theight: 30px;\n`;\nconst ButtonEdit = styled.button`\n\tbackground-color: white;\n\tborder: none;\n\tcolor: black;\n\tpadding: 12px 30px;\n\ttext-align: center;\n\ttext-decoration: none;\n\tdisplay: inline-block;\n\tfont-size: 16px;\n\tmargin-left: 15px;\n\t:hover {\n\t\tbackground-color: black;\n\t\tcolor: white;\n\t}\n`;\n\nexport function TodoForm(props) {\n\tconst [input, setInput] = useState(props.edit ? props.edit.value : \"\");\n\n\tconst inputFocus = useRef(null);\n\n\tuseEffect(() => {\n\t\tinputFocus.current.focus();\n\t});\n\n\tconst handleChange = (e) => {\n\t\tsetInput(e.target.value);\n\t};\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\n\t\tprops.onSubmit({\n\t\t\tid: Math.floor(Math.random() * 10000),\n\t\t\ttext: input,\n\t\t});\n\n\t\tsetInput(\"\");\n\t};\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t{props.edit ? (\n\t\t\t\t<DivInputEdit>\n\t\t\t\t\t<InputEdit\n\t\t\t\t\t\tplaceholder=\"Please edit your item\"\n\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tname=\"text\"\n\t\t\t\t\t\tref={inputFocus}\n\t\t\t\t\t/>\n\t\t\t\t\t<ButtonEdit onClick={handleSubmit}>Edit</ButtonEdit>\n\t\t\t\t</DivInputEdit>\n\t\t\t) : (\n\t\t\t\t<DivInputAdd>\n\t\t\t\t\t<InputAdd\n\t\t\t\t\t\tplaceholder=\"Please add your task\"\n\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tname=\"text\"\n\t\t\t\t\t\tref={inputFocus}\n\t\t\t\t\t/>\n\t\t\t\t\t<ButtonAdd onClick={handleSubmit}>Add your task</ButtonAdd>\n\t\t\t\t</DivInputAdd>\n\t\t\t)}\n\t\t</form>\n\t);\n}\n","import React, { useState } from \"react\";\nimport { AiFillCloseCircle, AiFillEdit } from \"react-icons/ai\";\nimport styled from \"styled-components\";\nimport { TodoForm } from \"./TodoForm\";\n\nconst ListDiv = styled.div`\n\tdisplay: flex;\n\twidth: 100%;\n\tjustify-content: center;\n`;\n\nconst TextDiv = styled.div`\n\tcolor: black;\n\tborder: 3px solid white;\n\tmargin: 15px;\n\twidth: 55%;\n\theight: 30px;\n\tpadding-top: 10px;\n\tpadding-left: 10px;\n`;\nconst Icons = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tfont-size: 24px;\n\tcursor: pointer;\n`;\n\nconst InputCompleted = styled.input`\n\theight: 30px;\n\twidth: 30px;\n`;\n\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\n\tconst [edit, setEdit] = useState({\n\t\tid: null,\n\t\tvalue: \"\",\n\t});\n\n\tconst submitUpdate = (value) => {\n\t\tupdateTodo(edit.id, value);\n\t\tsetEdit({\n\t\t\tid: null,\n\t\t\tvalue: \"\",\n\t\t});\n\t};\n\n\tif (edit.id) {\n\t\treturn <TodoForm edit={edit} onSubmit={submitUpdate} />;\n\t}\n\n\treturn todos.map((todo, index) => (\n\t\t<ListDiv key={index}>\n\t\t\t<TextDiv key={todo.id} onClick={() => completeTodo(todo.id)}\n\t\t\tstyle={{textDecoration: !todo.isComplete ? \"\" : \"line-through\" }}>\n\t\t\t\t{todo.text}\n\t\t\t</TextDiv>\n\t\t\t<Icons>\n\t\t\t\t<AiFillCloseCircle\n\t\t\t\t\tsize={40}\n\t\t\t\t\tcolor={\"red\"}\n\t\t\t\t\tonClick={() => removeTodo(todo.id)}\n\t\t\t\t/>\n\t\t\t\t<AiFillEdit\n\t\t\t\t\tsize={40}\n\t\t\t\t\tcolor={\"blue\"}\n\t\t\t\t\tonClick={() => setEdit({ id: todo.id, value: todo.text })}\n\t\t\t\t/>\n\t\t\t\t<InputCompleted\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tid=\"completed\"\n\t\t\t\t\tchecked={todo.isComplete}\n\t\t\t\t\tonChange={() => completeTodo(todo.id)}\n\t\t\t\t/>\n\t\t\t</Icons>\n\t\t</ListDiv>\n\t));\n}\n\nexport default Todo;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Todo from \"./Todo\";\nimport { TodoForm } from \"./TodoForm\";\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\theight: 100vh;\n\twidth: 100vw;\n\tbackground-image: linear-gradient( 135deg, #79F1A4 10%, #0E5CAD 100%);\n\tmin-width: 800px;\n`;\n\nconst ContentDiv = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tborder: 1px white solid;\n\tmargin-top: 100px;\n\twidth:50%;\n\theight: 80%;\n\tcolor:white;\n\tmin-width: 800px;\n`;\n\n\n\nfunction ListToDo() {\n\tconst [todos, setTodos] = useState([]);\n\tconst addToDo = (todo) => {\n\t\tif (!todo.text || /^\\s*$/.test(todo.text)) {\n\t\t\treturn alert ('field cannot be empty')\n\t\t}\n\n\t\tconst newTodos = [todo, ...todos];\n\n\t\tsetTodos(newTodos);\n\t};\n\n\tconst updateTodo = (todoId, newValue) => {\n\t\tif (!newValue.text || /^\\s*$/.test(newValue.text)) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetTodos((prev) =>\n\t\t\tprev.map((item) => (item.id === todoId ? newValue : item))\n\t\t);\n\t};\n\n\tconst removeTodo = (id) => {\n\t\tconst removeArr = [...todos].filter((todo) => todo.id !== id);\n\n\t\tsetTodos(removeArr);\n\t};\n\n\tconst completeTodo = (id) => {\n\t\tlet updatedTodos = todos.map((todo) => {\n\t\t\tif (todo.id === id) {\n\t\t\t\ttodo.isComplete = !todo.isComplete;\n\t\t\t}\n\t\t\treturn todo;\n\t\t});\n\n\t\tsetTodos(updatedTodos);\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<ContentDiv>\n\t\t\t\t<div>\n\t\t\t\t\t<h1>Todo List</h1>\n\t\t\t\t</div>\n\t\t\t\t<TodoForm onSubmit={addToDo}></TodoForm>\n\t\t\t\t<Todo\n\t\t\t\t\ttodos={todos}\n\t\t\t\t\tcompleteTodo={completeTodo}\n\t\t\t\t\tremoveTodo={removeTodo}\n\t\t\t\t\tupdateTodo={updateTodo}\n\t\t\t\t></Todo>\n\t\t\t</ContentDiv>\n\t\t</Container>\n\t);\n}\n\nexport default ListToDo;\n","\nimport ListToDo from \"./components/ListToDo\";\n\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ListToDo></ListToDo>\n\t\t</div>\n\t);\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}